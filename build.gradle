plugins {
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'maven-publish'
}

// The project version is controlled externally by the "version.sh" script.
def getVersion = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'bash', 'version.sh'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

group = 'com.cinchapi'
version  = getVersion()
// Drop the build component from version number and use that for
// publishing
ext.mavenVersion = version.split('\\.')
ext.mavenVersion[3] = ext.mavenVersion[3].replaceAll("[0-9]+-", "-")
ext.mavenVersion[3] = ext.mavenVersion[3].replaceAll("[0-9]+", "").trim()
ext.mavenVersion = ext.mavenVersion.join(".").replace(".-", "-").replaceAll('\\.$', "")

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

repositories {
    mavenCentral()
    mavenLocal()
    maven {
          url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
    maven {
    url "https://dl.cloudsmith.io/public/cinchapi/open-source/maven/"

  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/open-source-snapshots/maven/"

  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/platform/maven/"

  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/platform-snapshots/maven/"

  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/enterprise/maven/"
    credentials {
      username System.getenv('CLOUDSMITH_API_USER')
      password System.getenv('CLOUDSMITH_API_KEY')
    }
  }
  maven {
    url "https://dl.cloudsmith.io/public/cinchapi/enterprise-snapshots/maven/"
    credentials {
      username System.getenv('CLOUDSMITH_API_USER')
      password System.getenv('CLOUDSMITH_API_KEY')
    }
  }
  maven {
    url 'https://oss.sonatype.org/content/repositories/snapshots/'
  }
}

jar {
  manifest {
    attributes("Specificiation-Title": project.name, "Specificiation-Version": version, "Implementation-Version": version)
  }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives sourcesJar
  archives javadocJar
}

publishing {
  repositories {
    maven {
      name = 'cloudsmith'
      def releasesRepoUrl = "https://api-g.cloudsmith.io/maven/cinchapi/open-source/"
      def snapshotsRepoUrl = "https://api-g.cloudsmith.io/maven/cinchapi/open-source-snapshots/"
      url = mavenVersion.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
      credentials {
        username = System.getenv('CLOUDSMITH_API_USER')
        password = System.getenv('CLOUDSMITH_API_KEY')
      }
    }
  }
  publications {
    maven(MavenPublication) {
      from components.java
      artifact sourcesJar
      artifact javadocJar
      groupId group
      artifactId project.name
      version mavenVersion
    }
  }
}
